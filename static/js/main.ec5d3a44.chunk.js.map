{"version":3,"sources":["App.js","message.js","Character.js","reportWebVitals.js","index.js"],"names":["App","useState","password","setPassword","passwordLength","setPasswordLength","includeUpperCase","setIncludeUpperCase","includeLowerCase","setIncludeLowerCase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","createPassword","characterList","characterListLength","length","i","characterIndex","Math","round","random","charAt","notify","message","hasError","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","className","onClick","e","navigator","clipboard","writeText","copyToClipboard","htmlFor","defaultValue","onChange","target","value","type","id","name","max","min","checked","newestOnTop","rtl","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec5d3a44.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport \"./App.css\"\r\nimport { numbers, upperCaseLetters, lowerCaseLetters, specialCharacters } from './Character'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { COPY_Fail, COPY_SUCCESS } from './message';\r\n\r\nconst App = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [passwordLength, setPasswordLength] = useState(24)\r\n  const [includeUpperCase, setIncludeUpperCase] = useState(false)\r\n  const [includeLowerCase, setIncludeLowerCase] = useState(false)\r\n  const [includeNumbers, setIncludeNumbers] = useState(false)\r\n  const [includeSymbols, setIncludeSymbols] = useState(false)\r\n  const handleGeneratePassword = () => {\r\n    if (!includeUpperCase && !includeLowerCase && !includeNumbers && !includeSymbols) {\r\n      notify(\"To generate password you must select atleast one checkbox\", true)\r\n    }\r\n    else {\r\n      let characterList = \"\"\r\n      if (includeNumbers) {\r\n        characterList = characterList + numbers\r\n      }\r\n      if (includeUpperCase) {\r\n        characterList = characterList + upperCaseLetters\r\n      }\r\n      if (includeLowerCase) {\r\n        characterList = characterList + lowerCaseLetters\r\n      }\r\n      if (includeSymbols) {\r\n        characterList = characterList + specialCharacters\r\n      }\r\n      setPassword(createPassword(characterList))\r\n      notify(\"Password berhasil di generate\", false)\r\n    }\r\n\r\n\r\n  }\r\n  const createPassword = (characterList) => {\r\n    let password = \"\"\r\n    const characterListLength = characterList.length\r\n    for (let i = 0; i < passwordLength; i++) {\r\n      const characterIndex = Math.round(Math.random() * characterListLength)\r\n      password = password + characterList.charAt(characterIndex)\r\n    }\r\n    return password\r\n  }\r\n  const copyToClipboard = (password) => {\r\n\r\n    navigator.clipboard.writeText(password)\r\n  }\r\n  const notify = (message, hasError = false) => {\r\n    if (hasError) {\r\n      toast.error(message, {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n    else {\r\n      toast(message, {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n\r\n  }\r\n  const handleCopyPassword = (e) => {\r\n    if (password === \"\") {\r\n      notify(COPY_Fail, true)\r\n    }\r\n    else {\r\n      copyToClipboard(password)\r\n      notify(COPY_SUCCESS)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"generator\">\r\n          <h2 className=\"generator__header\">\r\n           aplikasi generate password\r\n          </h2>\r\n          <div className=\"generator__password\">\r\n            <h3 >{password}</h3>\r\n            <button className=\"copy__btn\">\r\n              <i onClick={handleCopyPassword} className=\"far fa-clipboard\"></i>\r\n            </button>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password-strength\">panjang pasword</label>\r\n            <input className=\"pw\" defaultValue={passwordLength} onChange={(e) => setPasswordLength(e.target.value)} type=\"number\" id=\"password-stregth\" name=\"password-strength\" max=\"26\" min=\"8\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"uppercase-letters\">tambah HURUF BESAR</label>\r\n            <input checked={includeUpperCase} onChange={(e) => setIncludeUpperCase(e.target.checked)} type=\"checkbox\" id=\"uppercase-letters\" name=\"uppercase-letters\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"lowercase-letters\">tambah huruf kecil</label>\r\n            <input checked={includeLowerCase} onChange={(e) => setIncludeLowerCase(e.target.checked)} type=\"checkbox\" id=\"lowercase-letters\" name=\"lowercase-letters\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"include-numbers\">tambah angka</label>\r\n            <input checked={includeNumbers} onChange={(e) => setIncludeNumbers(e.target.checked)} type=\"checkbox\" id=\"include-numbers\" name=\"include-numbers\" />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"include-symbols\">tambah simbol</label>\r\n            <input checked={includeSymbols} onChange={(e) => setIncludeSymbols(e.target.checked)} type=\"checkbox\" id=\"include-symbols\" name=\"include-symbols\" />\r\n          </div>\r\n          <button onClick={handleGeneratePassword} className=\"generator__btn\">\r\n            Generate Password anda\r\n          </button>\r\n          <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","export const COPY_SUCCESS = \"password berhasil di copy\"\r\nexport const COPY_Fail = \"Password gagal di copy\"","export const numbers = '0123456789'\r\nexport const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nexport const lowerCaseLetters ='abcdefghijklmnopqrstuvwxyz'\r\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}